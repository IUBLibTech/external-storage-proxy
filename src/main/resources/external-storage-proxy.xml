<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
         
  
  <bean id="defaultProcessor" class="org.fcrepo.camel.external.storage.provider.sda.DefaultProcessor"/>
  <bean id="sda_proxy_routes" class="org.fcrepo.camel.external.storage.provider.sda.StorageProxyRouter"/>
  <bean id="database_service" class="org.fcrepo.camel.external.storage.service.DatabaseService"/>
  <bean id="sda_job_service" class="org.fcrepo.camel.external.storage.provider.sda.JobService"/>
  <bean id="common_response_processor" class="org.fcrepo.camel.external.storage.common.CommonResponseProcessor"/>
  <bean id="myStringToMapTypeConverter" class="org.fcrepo.camel.external.storage.common.StringToMapTypeConverter"/>
  
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>
  <camelContext id="ExternalStorageProxy" xmlns="http://camel.apache.org/schema/spring">
    
    
    <!-- Route builder references for custom storage provider plugins   -->
    <routeBuilder ref="sda_proxy_routes" />
    
    <!-- These endpoint defs allow property placeholders within URIs -->
    <endpoint id="job_ready_proc" uri="jpa://org.fcrepo.camel.external.storage.model.Job?consumer.namedQuery=readyJobs&amp;consumer.delay={{job_ready_period}}&amp;consumeDelete=false" />
    <endpoint id="dummy_queued_proc" uri="jpa://org.fcrepo.camel.external.storage.model.Job?consumer.namedQuery=queuedJobs&amp;parameters={&quot;service&quot;:&quot;dummyService&quot;}&amp;consumer.delay={{dummy_queued_proc_period}}&amp;consumeDelete=false"/>
    <endpoint id="dummy_pending_proc" uri="jpa://org.fcrepo.camel.external.storage.model.Job?consumer.namedQuery=pendingJobs&amp;parameters={&quot;service&quot;:&quot;dummyService&quot;}&amp;consumer.delay={{dummy_pending_proc_period}}&amp;consumeDelete=false" />
    <endpoint id="sda_queued_proc" uri="jpa://org.fcrepo.camel.external.storage.model.Job?consumer.namedQuery=queuedJobs&amp;parameters={&quot;service&quot;:&quot;sda&quot;}&amp;consumer.delay={{sda_queued_proc_period}}&amp;consumeDelete=false&amp;consumeLockEntity=false" />
    <endpoint id="sda_timer" uri="timer://sda_timer?fixedRate=true&amp;period={{sda_timer_period}}"/>
    
    <!-- Core endpoints using Camel REST DSL -->
    <rest path="/">
      <get uri="/{service}/status/{external_uri}">
        <to uri="direct:status_header"/>
      </get>
      
      <post uri="/{service}/{action}/{external_uri}">
        <toD uri="direct:${header.action}_header"/>
      </post>
      
      <get uri="/jobs">
        <to uri="bean:database_service?method=findJobs"/>
      </get>
    </rest>

    <!-- Core routes for creating and processing job requests -->
    
    <route id="externalUriStatus">
      <from uri="direct:externalUriStatus"/>
      <to uri="bean:database_service?method=findJobsByFile(${header.external_uri})"/>
      <to uri="bean:common_response_processor"/>
      <to uri="direct:log_request"/>
    </route>
    
    <route id="job_ready_processor">
      <from uri="ref:job_ready_proc" />
      <to uri="direct:log_request"/>
    </route>
    
    <route id="status_header">
      <from uri="direct:status_header"/>
      <setHeader headerName="action"><constant>status</constant></setHeader>
      <toD uri="direct:begin_${header.service}_status"/>
    </route>
    
    <route id="stage_header">
      <from uri="direct:stage_header"/>
      <setHeader headerName="action"><constant>stage</constant></setHeader>
      <toD uri="direct:begin_${header.service}_stage"/>
    </route>
    
    <route id="log_request">
      <from uri="direct:log_request" />
      <log message="Requesting ${header.service} ${header.action} of ${header.external_uri}"/>
      <log message="Headers: ${headers}"/>
      <log message="Body: ${body}"/>
    </route>
    
    <!-- Dummy routes for test suite -->
    <route id="begin_dummyService_status">
      <from uri="direct:begin_dummyService_status"/>
      <to uri="direct:externalUriStatus"/>
      <to uri="direct:log_request"/>
    </route>
    
    <route id="begin_dummyService_stage">
      <from uri="direct:begin_dummyService_stage"/>
      <to uri="bean:database_service?method=generateJob(${header.external_uri}, ${header.service}, 'stage')"/>
      <to uri="jpa://org.fcrepo.camel.external.storage.model.Job"/>
      <to uri="direct:log_request"/>
    </route>
    
    <route id="begin_dummyService_runner">
      <from uri="direct:begin_dummyService_runner"/>
      <to uri="direct:log_request"/>
    </route>
    
    <route id="dummyService_queued_processor">
      <from uri="ref:dummy_queued_proc" />
      <to uri="direct:begin_dummyService_runner"/>
      <to uri="direct:log_request"/>
    </route>
    
    <route id="dummyService_pending_processor">
      <from uri="ref:dummy_pending_proc" />
      <to uri="direct:begin_dummyService_runner"/>
      <to uri="direct:log_request"/>
    </route>
    
    
    <!-- Routes for custom storage provider plugins   -->

    <!-- Routes for SDA provider plugin  -->
    <route id="begin_sda_status">
      <from uri="direct:begin_sda_status"/>
      <to uri="direct:externalUriStatus"/>
      <to uri="direct:log_request"/>
    </route>

    <route id="begin_sda_stage">
      <from uri="direct:begin_sda_stage"/>
      <to uri="bean:database_service?method=generateJob(${header.external_uri}, ${header.service}, 'stage')"/>
      <to uri="jpa://org.fcrepo.camel.external.storage.model.Job"/>
      <to uri="direct:log_request"/>
    </route>
    
    <route id="sda_queued_processor">
      <from uri="ref:sda_queued_proc" />
      <log message="Processed jobs database with job #id ${body.id} for ${body.externalUri} with ${body.status}"/>
      <to uri="direct:begin_sdaService_runner"/>
      <to uri="direct:log_request"/>
    </route>
    
    <route id="begin_sdaService_runner">
      <from uri="direct:begin_sdaService_runner"/>
      <log message="Posting SDA job with job #id ${body.id} for ${body.externalUri} with ${body.status}"/>
      <to uri="direct:sdaPostJob"/>
      <to uri="direct:log_request"/>
    </route>
    
    <route id="sda_pending_processor">
      <from uri="ref:sda_timer"/>
      <log message="Processing ${body.size} pending jobs service for SDA Service"/>
      <to uri="bean:database_service?method=findPendingJobsByService(sda)"/>
      <to uri="bean:sda_job_service"/>
      <to uri="direct:log_request"/>
    </route>

    <!-- Routes for S3 provider plugin  -->
    <route id="begin_s3_status">
      <from uri="direct:begin_s3_status"/>
      <to uri="direct:log_request"/>
      <pollEnrich timeout="10000" aggregateOnException="true">
        <simple>aws-s3:{{s3_bucket}}?fileName=${header.external_uri}&amp;includeBody=false&amp;synchronous=false&amp;deleteAfterRead=false&amp;accessKey={{s3_access_key}}&amp;secretKey={{s3_secret_key}}</simple>
      </pollEnrich>
      <log message="Last Modified: ${headers.CamelAwsS3LastModified}"/>
    </route>

    <route id="begin_s3_stage">
      <from uri="direct:begin_s3_stage"/>
      <to uri="direct:log_request"/>
      <pollEnrich timeout="10000" aggregateOnException="true">
        <simple>aws-s3:{{s3_bucket}}?fileName=${header.external_uri}&amp;synchronous=false&amp;deleteAfterRead=false&amp;accessKey={{s3_access_key}}&amp;secretKey={{s3_secret_key}}</simple>
      </pollEnrich>
      <log message="Last Modified: ${headers.CamelAwsS3LastModified}"/>
      <to uri="direct:write_file_cache"/>
    </route>

    <!-- Routes for filesystem provider plugin  -->
    <route id="begin_file_status">
      <from uri="direct:begin_file_status"/>
      <to uri="direct:log_request"/>
      <to uri="direct:read_file_cache"/>
    </route>

    <route id="begin_file_stage">
      <from uri="direct:begin_file_stage"/>
      <to uri="direct:log_request"/>
    </route>

    <route id="read_file_cache">
      <from uri="direct:read_file_cache"/>
      <!--<setHeader headerName="CamelFileName"><simple>${cache_dir}/${header.external_uri}</simple></setHeader>-->
      <pollEnrich timeout="0">
        <simple>file:{{cache_dir}}/${header.external_uri}</simple>
      </pollEnrich>
    </route>

    <route id="write_file_cache">
      <from uri="direct:write_file_cache"/>
      <!--<setHeader headerName="CamelFileName"><simple>${header.external_uri}</simple></setHeader>-->
      <enrich>
        <simple>file:{{cache_dir}}/${header.external_uri}</simple>
      </enrich>
    </route>



  </camelContext>

</beans>
