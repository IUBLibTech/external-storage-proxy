<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:camel="http://camel.apache.org/schema/blueprint"
     xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
     xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
     xsi:schemaLocation="
            http://www.osgi.org/xmlns/blueprint/v1.0.0
            http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
            http://camel.apache.org/schema/blueprint
            http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
            ">

  <!-- START SNIPPET: e1 -->
  <!-- this is the JDBC data source which uses an in-memory only Apache Derby database -->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/external_storage_proxy"/>
    <property name="username" value="****"/>
    <property name="password" value="****"/>
  </bean>

  <!-- configure the Camel SQL component to use the JDBC data source -->
  <!-- <bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
    <property name="dataSource" ref="dataSource"/>
  </bean> -->


<camelContext xmlns="http://camel.apache.org/schema/blueprint">
  <restConfiguration component="jetty" port="9091">
    <componentProperty key="foo" value="123"/>
  </restConfiguration>
  <rest path="/say">
    <get uri="/hello">
      <to uri="direct:hello"/>
    </get>
    <get uri="/bye" consumes="application/json">
      <to uri="direct:bye"/>
    </get>
    <post uri="/bye">
      <to uri="mock:update"/>
    </post>
  </rest>
  <route>
    <from uri="direct:hello"/>
    <transform>
      <constant>Hello World</constant>
    </transform>
    <to uri="direct:new-job"/>
  </route>
  <route>
    <from uri="direct:bye"/>
    <transform>
      <constant>Bye World</constant>
    </transform>
  </route>

  <!-- route that generate new orders and insert them in the database -->
  <route id="new-job">
    <from uri="direct:new-job"/>
    <to uri="sql:INSERT INTO jobs (EXTERNAL_URI, FEDORA_URI, SERVICE, STAGED) VALUES ('1234uuidabc', '123ab45cd', 's3', 0);"/>
    <log message="Created new job"/>
  </route>

</camelContext>
</blueprint>
