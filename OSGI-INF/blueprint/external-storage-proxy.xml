<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:camel="http://camel.apache.org/schema/blueprint"
           xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xsi:schemaLocation="
            http://www.osgi.org/xmlns/blueprint/v1.0.0
            http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
            http://camel.apache.org/schema/blueprint
            http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
            ">
  <cm:property-placeholder id="external_storage_config" persistent-id="external_storage" update-strategy="reload"/>

  <bean id="sda_default_processor" class="edu.indiana.dlib.hydradam.storageproxy.DefaultProcessor"/>
  <bean id="sda_proxy_routes" class="edu.indiana.dlib.hydradam.storageproxy.StorageProxyRouter"/>

  <camelContext xmlns="http://camel.apache.org/schema/blueprint">
    <routeBuilder ref="sda_proxy_routes" />

    <restConfiguration component="jetty" port="9091">
      <componentProperty key="foo" value="123"/>
    </restConfiguration>

    <rest path="/" bindingMode="json">
      <get uri="/{service}/status/{external_uri}">

        <toD uri="direct:begin_{header.service}_status"/>
      </get>
      <post uri="/{service}/stage/{external_uri}">

        <toD uri="direct:begin_{header.service}_stage"/>
      </post>
    </rest>

    <!-- Public API routes -->

    <route>
      <from uri="direct:begin_sda_status"/>
      <setHeader headerName="action"><constant>status</constant></setHeader>
      <to uri="direct:log_request"/>
    </route>

    <route>
      <from uri="direct:begin_sda_stage"/>
      <setHeader headerName="action"><constant>stage</constant></setHeader>
      <to uri="direct:log_request"/>
    </route>

    <route>
      <from uri="direct:begin_s3_status"/>
      <to uri="direct:log_request"/>
      <pollEnrich timeout="10000" aggregateOnException="true">
        <simple>aws-s3:{{s3_bucket}}?fileName=${header.external_uri}&amp;includeBody=false&amp;synchronous=false&amp;deleteAfterRead=false&amp;accessKey={{s3_access_key}}&amp;secretKey={{s3_secret_key}}</simple>
      </pollEnrich>
      <log message="Last Modified: ${headers.CamelAwsS3LastModified}"/>
    </route>

    <route>
      <from uri="direct:begin_s3_stage"/>
      <to uri="direct:log_request"/>
      <pollEnrich timeout="10000" aggregateOnException="true">
        <simple>aws-s3:{{s3_bucket}}?fileName=${header.external_uri}&amp;synchronous=false&amp;deleteAfterRead=false&amp;accessKey={{s3_access_key}}&amp;secretKey={{s3_secret_key}}</simple>
      </pollEnrich>
      <log message="Last Modified: ${headers.CamelAwsS3LastModified}"/>
      <to uri="direct:write_file_cache"/>
    </route>

    <route>
      <from uri="direct:begin_file_status"/>
      <to uri="direct:log_request"/>
      <to uri="direct:read_file_cache"/>
    </route>

    <route>
      <from uri="direct:begin_file_stage"/>
      <to uri="direct:log_request"/>
    </route>

    <!-- Internal routes -->

    <route>
      <from uri="direct:read_file_cache"/>
      <!--<setHeader headerName="CamelFileName"><simple>${cache_dir}/${header.external_uri}</simple></setHeader>-->
      <pollEnrich timeout="0">
        <simple>file:{{cache_dir}}/${header.external_uri}</simple>
      </pollEnrich>
    </route>

    <route>
      <from uri="direct:write_file_cache"/>
      <!--<setHeader headerName="CamelFileName"><simple>${header.external_uri}</simple></setHeader>-->
      <enrich>
        <simple>file:{{cache_dir}}/${header.external_uri}</simple>
      </enrich>
    </route>

    <route>
      <from uri="direct:log_request" />
      <log message="Requesting ${header.service} ${header.action} of ${header.external_uri}"/>
      <!--<log message="Headers: ${headers}"/>-->
      <!--<log message="Body: ${body}"/>-->
    </route>

  </camelContext>
</blueprint>
